{"version":3,"sources":["constants/App.constant.js","containers/Tables.js","containers/Header.js","containers/App.js","actions/App.actions.js","serviceWorker.js","reducers/App.reducer.js","reducers/index.js","utils/request.js","utils/api.js","sagas/App.saga.js","store/index.js","index.js"],"names":["FETCH_DATA","FETCH_SUCCESS","Tables","renderHeader","_","map","keys","_this","props","jsonData","e","index","react_default","a","createElement","key","renderTableData","data","values","Table","striped","bordered","hover","this","PureComponent","Header","menuChange","menu","_this2","className","type","value","source","disabled","Dropdown","Toggle","variant","id","Menu","Item","onSelect","onClick","App","link","fetchData","Header_Header","Tables_Tables","React","withConnect","connect","state","AppReducer","tableData","dispatch","compose","Boolean","window","location","hostname","match","initialState","arguments","length","undefined","action","Object","objectSpread","url","combineReducers","parseJSON","response","status","json","checkStatus","error","Error","statusText","then","parsedResponse","request","options","fetch","requestWrapper","getData","_ref","requestURL","method","body","regenerator_default","wrap","_context","prev","next","call","sent","abrupt","t0","stop","_marked","_context2","_marked2","sagas","put","finish","App_saga_marked","takeLatest","App_saga_marked2","sagaMiddleware","createSagaMiddleware","middlewares","enhancers","applyMiddleware","apply","composeEnhancers","store","createStore","reducer","run","runSaga","injectedReducers","injectedSagas","render","ReactDOM","es","src_containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c06dc5f7.chunk.js","sourcesContent":["export const FETCH_DATA='App/FETCH_DATA';\nexport const FETCH_SUCCESS='App/FETCH_SUCCESS';","import React, { PureComponent } from 'react'\nimport {Table} from 'react-bootstrap';\nimport _ from 'lodash';\n\nexport default class Tables extends PureComponent {\n  renderHeader = () => {\n    return _.map(_.keys(this.props.jsonData[0]),(e, index) => {return (<th key={index}>{e}</th>)});\n   }\n  \n   renderTableData = () => {\n     return _.map(this.props.jsonData, (e, index) => {\n        let data = _.values(e);\n        return (<tr key={index}>{_.map(data, (e,index) => { return (<td key={index}>{e}</td>) })}</tr>)\n      })\n   }\n  \n  render() {\n    return (\n      <div>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              {this.renderHeader()}\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderTableData()}\n          </tbody>\n      </Table>\n      </div>\n    )\n  }\n}\n\n// Tables.propTypes = {\n//   jsonData: PropTypes.array.isRequired,\n//   handleCountryFetch: PropTypes.func.isRequired,\n// }\n\n// // const withConnect = connect(\n// //   mapStateToProps,\n// //   mapDispatchToProps,\n// // );\n\n// export default compose(\n// )(Tables);\n","import React, { PureComponent } from 'react'\nimport {Dropdown} from 'react-bootstrap';\n\nexport default class Header extends PureComponent {\n  menuChange = (menu) => {\n    this.props.menuChange(menu);\n  }\n\n  render() {\n    return (\n      <div>\n        <div >\n          <label className=\"labelClass\">Current Source:</label>\n          <input type=\"text\" value={this.props.source} className=\"inputField\" disabled/>\n        </div>\n        <Dropdown>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"dropdownClass\">\n          Select Source\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <Dropdown.Item onSelect={(e)=>this.menuChange('posts')}>Posts</Dropdown.Item>\n          <Dropdown.Item onClick={(e)=>this.menuChange('comments')}>Comments</Dropdown.Item>\n          <Dropdown.Item onClick={(e)=>this.menuChange('todos')}>Todos</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { fetchData } from \"../actions/App.actions\";\nimport \"./App.css\";\nimport Tables from \"./Tables\";\nimport Header from \"./Header\";\n\n\nclass App extends React.PureComponent {\n  componentWillMount() {\n    this.props.fetchData(\"https://jsonplaceholder.typicode.com/posts\");\n  }\n  menuChange = (menu) => {\n      let link = '';\n      switch(menu) {\n        case 'posts': link = 'https://jsonplaceholder.typicode.com/posts'; break;\n        case 'todos': link = 'https://jsonplaceholder.typicode.com/todos'; break;\n        case 'comments': link = 'https://jsonplaceholder.typicode.com/comments'; break;\n        default : link = 'https://jsonplaceholder.typicode.com/posts'; break;\n      }\n    this.props.fetchData(link);\n  }\n  render() {\n    const jsonData = this.props.jsonData;\n    const source = this.props.source;\n    return (\n      <div>\n        <Header source={source} menuChange={this.menuChange} />\n        <Tables jsonData={jsonData}/>\n      </div>\n    );\n  }\n}\nApp.propTypes = {\n  jsonData: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    jsonData: state.AppReducer.tableData,\n    source: state.AppReducer.source,\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    fetchData: link => dispatch(fetchData(link))\n  };\n}\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(withConnect)(App);\n","import {FETCH_DATA, FETCH_SUCCESS} from '../constants/App.constant';\n\nexport function fetchData(link) {\n  return {\n    type: FETCH_DATA,\n    link,\n  };\n}\n\nexport function fetchDataSuccess(data, url) {\n  return {\n    type: FETCH_SUCCESS,\n    data,\n    url,\n  };\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {FETCH_SUCCESS} from '../constants/App.constant';\n\nexport const initialState = {\n  source:'https://jsonplaceholder.typicode.com/posts',\n  tableData: [],\n};\n\nfunction AppReducer(state = initialState, action) {\n  switch(action.type) {\n    case FETCH_SUCCESS: return {...state, tableData:action.data, source:action.url};\n    default: return state;\n  }\n}\n\nexport default AppReducer;","import { combineReducers } from 'redux';\n\nimport AppReducer from './App.reducer';\n\n\nexport default combineReducers({\n  AppReducer,\n});\n","import 'whatwg-fetch';\n\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  return response.json().then(parsedResponse => {\n    error.response = parsedResponse;\n    throw error;\n  });\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}\n","import { call } from 'redux-saga/effects';\nimport request from './request';\n\nfunction* requestWrapper({ requestURL, method, body }) {\n  try {\n    const response = yield call(request, requestURL, {\n      method,\n      body,\n    });\n    return response;\n  } catch (error) {throw error;}\n}\n\nexport function* getData(link) {\n  const response = yield call(requestWrapper, {\n    requestURL: link,\n    method: 'GET',\n  });\n  return response;\n}","import { call, put, takeLatest } from 'redux-saga/effects';\n\nimport { fetchDataSuccess } from '../actions/App.actions';\nimport {FETCH_DATA} from '../constants/App.constant';\nimport {getData} from '../utils/api';\nexport function* fetchData({ link }) {\n  try {\n    const response = yield call(getData, link);\n    yield put(fetchDataSuccess(response, link));\n  } catch (error) {\n  } finally {\n  }\n}\n\n\nexport default function* sagas() {\n  yield takeLatest(FETCH_DATA, fetchData);\n\n}","import { createStore, applyMiddleware, compose} from \"redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers/index';\nimport App from '../sagas/App.saga'\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nconst enhancers = [applyMiddleware(...middlewares)];\n// If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle, indent */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n          // Prevent recomputing reducers for `replaceReducer`\n          shouldHotReload: false,\n        })\n      : compose;\n\nconst store = createStore(reducer,composeEnhancers(...enhancers));\nsagaMiddleware.run(App);\nstore.runSaga = sagaMiddleware.run;\nstore.injectedReducers = {}; // Reducer registry\nstore.injectedSagas = {}; // Saga registry\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './store/index';\nimport { Provider } from 'react-redux';\n\nconst render = () =>{\n  return ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n}\nrender();\nstore.subscribe(render);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}